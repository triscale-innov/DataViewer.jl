var documenterSearchIndex = {"docs":
[{"location":"extend/","page":"Extending","title":"Extending","text":"CurrentModule = DataViewer","category":"page"},{"location":"extend/#Extending-DataViewer-to-support-more-data-formats","page":"Extending","title":"Extending DataViewer to support more data formats","text":"","category":"section"},{"location":"extend/","page":"Extending","title":"Extending","text":"recurse_into\nfiletype\nopen_datafile\ngraphic_repr\nget_data\npretty_repr","category":"page"},{"location":"extend/#DataViewer.recurse_into","page":"Extending","title":"DataViewer.recurse_into","text":"recurse_into(x) -> Bool\n\nTells whether x is some form of \"container\" that can be recursed into, or a \"leaf\" data.\n\n\n\n\n\n","category":"function"},{"location":"extend/#DataViewer.filetype","page":"Extending","title":"DataViewer.filetype","text":"filetype(fname::String)\n\nGet the file type associated to a file named fname, according to its extension.\n\n\n\n\n\nfiletype(v::Val)\n\nGet the file type associated to the name extension given by v = Val(Symbol(extension)).\n\nExample\n\njulia> filetype(Val(Symbol(\".jld2\")))\nJLD2File\n\n\n\n\n\n","category":"function"},{"location":"extend/#DataViewer.open_datafile","page":"Extending","title":"DataViewer.open_datafile","text":"open_datafile(fun, fname, ftype)\n\nLoad the data contained in fname, which should be stored using the format described by ftype. Apply fun on the loaded data. This function guarantees that the file stays open as long as needed, but is closed before the function returns.\n\nExample\n\njulia> ftype = filetype(Val(Symbol(\".jld2\")))\nJLD2File\n\njulia> open_datafile(\"sample.jld2\", ftype) do data\n           println(typeof(data))\n       end\nDict\n\n\n\n\n\n","category":"function"},{"location":"extend/#DataViewer.graphic_repr","page":"Extending","title":"DataViewer.graphic_repr","text":"(options, repr) = graphic_repr(x)\n\nIf x supports one or more graphical representation(s), options is a non-empty Vector{RepresentationOption}. In that case, calling repr(options[i].param) should produce the graphical representation corresponding to the i-th entry in the list.\n\n\n\n\n\n","category":"function"},{"location":"extend/#DataViewer.get_data","page":"Extending","title":"DataViewer.get_data","text":"get_data(container, path)\n\nGet the piece of data stored in container under path.\n\nget_data(container, (a, b, b))\n\nshould be more or less equivalent to\n\ncontainer[a][b][c]\n\n\n\n\n\n","category":"function"},{"location":"extend/#DataViewer.pretty_repr","page":"Extending","title":"DataViewer.pretty_repr","text":"pretty_repr(x) -> String\n\nReturn a pretty textual representation of x. By default it is based on show, but can be customized as needed.\n\n\n\n\n\n","category":"function"},{"location":"ref/","page":"Reference","title":"Reference","text":"CurrentModule = DataViewer","category":"page"},{"location":"ref/#Reference-for-the-user-facing-API","page":"Reference","title":"Reference for the user-facing API","text":"","category":"section"},{"location":"ref/","page":"Reference","title":"Reference","text":"view\ninstall","category":"page"},{"location":"ref/#DataViewer.view","page":"Reference","title":"DataViewer.view","text":"view(data, name = \"\")\n\nOpen a viewer window for data, which may be a dictionary, HDF5 file, or possibly another key=>value based data type.\n\nOptionally, name is a String indicating where data originates from (for example, a file name).\n\n\n\n\n\nview(fname::String, ftype = \"\")\n\nOpen a viewer window for the data contained in file fname.\n\nThe extension of fname is normally used to determine how to read it. But the optional argument ftype may be provided to override this behavior. In this case, ftype should be a file extension associated to the file format (for example: \".jld2\" for JLD2 files).\n\nBecause the file may need to be accessed during the whole browsing session, this function does not return until the window has been closed, at which point the data file itself is closed as well.\n\n\n\n\n\n","category":"function"},{"location":"ref/#DataViewer.install","page":"Reference","title":"DataViewer.install","text":"install(; command::String = \"dataviewer\",\n          destdir::String = joinpath(DEPOT_PATH[1], \"bin\"),\n          force::Bool     = false,\n          sysimage::Bool  = true)\n\nInstall a DataViewer launcher script to the destdir directory, with filename command. The default directory is a bin subfolder inside the first DEPOT_PATH entry, which usually translates to ~/.julia/bin. Add this directory to your PATH environment variable in order to more easily run the DataViewer launcher.\n\nSet force to true to overwrite an existing destination file with the same path.\n\nIf sysimage is true (the default), a system image is compiled and the launcher script is set up to use it.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DataViewer","category":"page"},{"location":"#DataViewer","page":"Home","title":"DataViewer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DataViewer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DataViewer is not registered (yet), so you need to provide its full URL to the Julia package manager.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] # enter Pkg mode\npkg> add https://github.com/triscale-innov/DataViewer.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since DataViewer requires a lot of heavy dependencies, it is not advised to add it to the default environment. One possibility would be to create a dedicated named environment:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ] # enter Pkg mode\n(@v1.9) pkg> activate @dataviewer\n(@dataviewer) pkg> add https://github.com/triscale-innov/DataViewer.jl.git","category":"page"},{"location":"#Use-as-a-Julia-package","page":"Home","title":"Use as a Julia package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DataViewer can be used as a regular package from inside a Julia REPL. Whenever there is some data structure that you want to explore, call the view function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using JLD2\n\njulia> data = JLD2.load(\"sample.jld2\");\n\njulia> using DataViewer\n[ Info: Precompiling DataViewer [69fa7e04-3a55-42d6-bb08-3ca48704fbef]\n[ Info: Precompiling JSON_Ext [056fc32c-03f3-5092-ad64-0a1590c5cd8d]\n[ Info: Precompiling JLD2_Ext [ab4143e6-3402-5971-8428-17ae5f4067b4]\n\njulia> DataViewer.view(data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is also possible to directly call view on a file name:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using HDF5\n[ Info: Precompiling HDF5_Ext [c89765bd-c6f5-5c69-b5b2-135d132d13bc]\n\njulia> DataViewer.view(\"sample.h5\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIn this case, you'll need to first load the appropriate package for the file format you want to read: HDF5, JLD2 or JSON.","category":"page"},{"location":"#Use-as-a-standalone-application","page":"Home","title":"Use as a standalone application","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After having installed the DataViewer package, you can ask it to install a standalone application, callable from the command-line:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DataViewer\n\njulia> DataViewer.install()","category":"page"},{"location":"","page":"Home","title":"Home","text":"By default, a launcher named dataviewer will be placed in the ~/.julia/bin directory, which you should add to your PATH environment variable. Afterwards, you can run this new command from a shell.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nWindows users may want to run something like:julia> DataViewer.install(destdir = joinpath(homedir(), \"Desktop\"))in order to put the launcher on their desktop.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Without argument, a file picker window will pop up to ask for a file to open:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ dataviewer","category":"page"},{"location":"","page":"Home","title":"Home","text":"With one argument, the given file will be viewed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ dataviewer sample.hdf5","category":"page"},{"location":"","page":"Home","title":"Home","text":"A second argument allows specifying the file type if the extension is not enough to guess it. This optional argument may be either the name of the relevant Julia package (e.g JSON) or a file extension associated to the file format (e.g .json):","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ dataviewer sample JSON","category":"page"}]
}
