var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DataViewer","category":"page"},{"location":"#DataViewer","page":"Home","title":"DataViewer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DataViewer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DataViewer]","category":"page"},{"location":"#DataViewer.filetype-Tuple{Val}","page":"Home","title":"DataViewer.filetype","text":"filetype(v::Val)\n\nGet the file type associated to the name extension given by v = Val(Symbol(extension)).\n\nExample\n\njulia> filetype(Val(Symbol(\".jld2\")))\nJLD2File\n\n\n\n\n\n","category":"method"},{"location":"#DataViewer.get_data","page":"Home","title":"DataViewer.get_data","text":"get_data(container, path)\n\nGet the piece of data stored in container under path.\n\nget_data(container, (a, b, b))\n\nshould be more or less equivalent to\n\ncontainer[a][b][c]\n\n\n\n\n\n","category":"function"},{"location":"#DataViewer.graphic_repr-Tuple{Any}","page":"Home","title":"DataViewer.graphic_repr","text":"(options, repr) = graphic_repr(x)\n\nIf x supports one or more graphical representation(s), options is a non-empty Vector{RepresentationOption}. In that case, calling repr(options[i].param) should produce the graphical representation corresponding to the i-th entry in the list.\n\n\n\n\n\n","category":"method"},{"location":"#DataViewer.install-Tuple{}","page":"Home","title":"DataViewer.install","text":"install(; command::String = \"dataviewer\",\n          destdir::String = joinpath(DEPOT_PATH[1], \"bin\"),\n          force::Bool     = false,\n          sysimage::Bool  = true)\n\nInstall a DataViewer launcher script to the destdir directory, with filename command. The default directory is a bin subfolder inside the first DEPOT_PATH entry, which usually translates to ~/.julia/bin. Add this directory to your PATH environment variable in order to more easily run the DataViewer launcher.\n\nSet force to true to overwrite an existing destination file with the same path.\n\nIf sysimage is true (the default), a system image is compiled and the launcher script is set up to use it.\n\n\n\n\n\n","category":"method"},{"location":"#DataViewer.open_datafile","page":"Home","title":"DataViewer.open_datafile","text":"open_datafile(fun, fname, ftype)\n\nLoad the data contained in fname, which should be stored using the format described by ftype. Apply fun on the loaded data. This function guarantees that the file stays open as long as needed, but is closed before the function returns.\n\nExample\n\n``` julia> ftype = filetype(Val(Symbol(\".jld2\"))) JLD2File\n\njulia> open_datafile(\"sample.jld2\", ftype) do data            println(typeof(data))        end Dict\n\n\n\n\n\n","category":"function"},{"location":"#DataViewer.pretty_repr-Tuple{Any}","page":"Home","title":"DataViewer.pretty_repr","text":"pretty_repr(x) -> String\n\nReturn a pretty textual representation of x. By default it is based on show, but can be customized as needed.\n\n\n\n\n\n","category":"method"},{"location":"#DataViewer.recurse_into-Tuple{Any}","page":"Home","title":"DataViewer.recurse_into","text":"recurse_into(x) -> Bool\n\nTells whether x is some form of \"container\" that can be recursed into, or a \"leaf\" data.\n\n\n\n\n\n","category":"method"},{"location":"#DataViewer.view","page":"Home","title":"DataViewer.view","text":"view(fname::String, ftype = \"\")\n\nOpen a viewer window for the data contained in file fname. The extension of fname is used to determine how to read it.\n\nBecause the file may need to be accessed during the whole browsing session, this function does not return until the window has been closed, at which point the data file itself is closed as well.\n\n\n\n\n\n","category":"function"},{"location":"#DataViewer.view-2","page":"Home","title":"DataViewer.view","text":"view(data, name = \"\")\n\nOpen a viewer window for data, which may be a dictionary, HDF5 file, or possibly another key=>value based data type.\n\nOptionally, name is a String indicating where data originates from (for example, a file name).\n\n\n\n\n\n","category":"function"}]
}
